name: Checkout new source

on:
  workflow_dispatch:
  schedule:
    - cron: "19 0,6,12,18 * * *" # China Time 0820 1420 2020 2620
    
concurrency:
  group: update-code-${{ github.ref }}
  cancel-in-progress: true

jobs:
  fetchXPI:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
      timeout-minutes: 1

    - name: Install git-secrets and jq
      run: |
        sudo apt-get install jq
        sudo apt-get install imagemagick
      timeout-minutes: 2

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20' 

    - name: Install Prettier
      run: npm install --global prettier
      timeout-minutes: 2

    - name: ðŸ‘¥ git config
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git checkout -B modified-files origin/main
        echo "skip_rest=false" >> $GITHUB_ENV
      timeout-minutes: 1

    - name: ðŸ“¥ Fetch latest pre-release .xpi URL
      id: fetch_xpi
      run: |
        JSON=$(curl -s https://api.github.com/repos/violentmonkey/violentmonkey/releases)
        URL=$(echo "$JSON" | jq -r '[.[] | select(.prerelease==true)][0].assets[] | select(.name | endswith(".xpi")).browser_download_url')
        echo "XPI_URL=$URL" >> $GITHUB_ENV
        echo "XPI File: $URL"
      timeout-minutes: 4

    - name: ðŸ“¥ Download and extract .xpi
      run: |
        filename=$(wget -nv $XPI_URL 2>&1 |cut -d\" -f2)
        7z x $filename -o./release
        rm $filename
      timeout-minutes: 3

    - name: ðŸ”– Conditional Tag Handling
      run: |
        version=$(grep -Po "\"version\"\s*\:\s*\"\K[0-9.]+" release/manifest.json)
        echo "Extracted version: $version"
    
        # Fetch tags to check existence
        git fetch --tags
    
        # Different actions based on trigger
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "<< Manual trigger: delete existing tag if exists and create a new one >>"
          # Manual trigger: delete existing tag if exists and create a new one
          if git tag -l | grep -q "v$version"; then
            echo "Tag v$version exists, deleting and recreating..."
            git tag -d "v$version"
            git push origin --delete "v$version"
          fi
        elif [[ "${{ github.event_name }}" == "schedule" ]]; then
          echo "<< Scheduled trigger: only create tag if not exists >>"
          # Scheduled trigger: only create tag if not exists
          if git tag -l | grep -q "v$version"; then
            echo "Tag v$version already exists, not creating new one."
            echo "skip_rest=true" >> $GITHUB_ENV
          fi
        fi
      timeout-minutes: 1

    - name: ðŸ”§ Unminify JavaScript files
      if: env.skip_rest == 'false'
      run: prettier --write '**/*.js'
      timeout-minutes: 2

    - name: ðŸ”§ Fix SecretID Issue
      if: env.skip_rest == 'false'
      run: sed -i 's/\.apps\.googleusercontent\.com\"/\.ap\"+\"ps\.googleus\"+\"ercontent\.com\"\/\* apps.googleusercontent.com \*\//g' release/background/index.js
      timeout-minutes: 1

    - name: ðŸ”§ Fix Manifest
      if: env.skip_rest == 'false'
      run: sed -i 's/Violentmonkey BETA/Violentmonkey RV/g' release/manifest.json
      timeout-minutes: 1

    - name: ðŸ”§ Prepend coder-cm-p.js to options_index.js
      if: env.skip_rest == 'false'
      run: |
        mv release/options/index.js release/options/index_tmp.js
        cat release/options/coder-cm-p.js release/options/index_tmp.js > release/options/index.js
        rm release/options/index_tmp.js
      timeout-minutes: 1

    - name: ðŸ“¥ Git Add
      if: env.skip_rest == 'false'
      run: |
        git add --all
      timeout-minutes: 2

    - name: Check for changes
      if: env.skip_rest == 'false'
      id: check_changes
      run: |
        if git diff --quiet && git diff --staged --quiet; then
          echo "No changes to commit."
          echo "skip_rest=true" >> $GITHUB_ENV
        fi
      timeout-minutes: 1

    - name: Resize Images
      if: env.skip_rest == 'false'
      run: |
        mkdir -p resized
        for img in $(find icons -name '*512*.png'); do
          base_tmp="${img%512*.png}" # .../nIcon
          base="${base_tmp##*/}" #nIcon
          suffix_tmp="${img#*512}" # w.png
          suffix="${suffix_tmp/.png/}" # w
          for size in 16 32 38 48 128; do
            output_path="release/public/images/${base}${size}${suffix}.png"
            convert "$img" -resize ${size}x${size} "$output_path"
          done
        done
      timeout-minutes: 2

    - name: ðŸ“¥ Git Add
      if: env.skip_rest == 'false'
      run: |
        git add --all
      timeout-minutes: 2

    - name: ðŸ“¤ Git Commit
      if: env.skip_rest == 'false'
      run: |
        git diff --staged --quiet || git commit -m "Update from .xpi"
      timeout-minutes: 1

    - name: ðŸ“¤ Git Push
      if: env.skip_rest == 'false'
      run: |
        git push -f origin modified-files
      timeout-minutes: 1

    - name: ðŸ”– Tag version
      if: env.skip_rest == 'false'
      run: |
        version=$(grep -Po "\"version\"\s*\:\s*\"\K[0-9.]+" release/manifest.json)
                
        echo "Extracted version: $version"

        # Debug existing tags
        git fetch --tags
        git tag -l

        # Check if the tag exists remotely
        if git ls-remote --tags origin | grep -q "refs/tags/v$version"; then
          echo "Tag v$version exists remotely. Deleting..."
          git push origin --delete "v$version"
        fi

        # Check if the tag exists locally
        if git tag -l | grep -q "v$version"; then
          echo "Tag v$version exists locally. Deleting..."
          git tag -d "v$version"
        fi

        # Create a new annotated tag
        echo "Creating new tag v$version"
        git tag -a "v$version" -m "https://github.com/violentmonkey/violentmonkey/releases/tag/v$version"

        git push --tags

        # Set environment variable for use in subsequent steps
        echo "FILE_VER=$version" >> $GITHUB_ENV

      timeout-minutes: 1

    - name: Show FILE_VER
      if: env.skip_rest == 'false'
      run: |
        echo "FILE_VER is set to: $FILE_VER"

    - name: Package Release Folder
      if: env.skip_rest == 'false'
      run: |
        echo "Zipping release folder for version $FILE_VER"
        7z a -r -tzip "Violentmonkey-modified-$FILE_VER.zip" ./release/*

    - name: Upload Artifact
      if: env.skip_rest == 'false'
      uses: actions/upload-artifact@v4
      with:
        name: "Violentmonkey-modified-${{ env.FILE_VER }}"
        path: "Violentmonkey-modified-${{ env.FILE_VER }}.zip"


    - name: Push Tag
      if: env.skip_rest == 'false'
      run: |
        echo "Pushing new tag v$FILE_VER"
        git push origin "v$FILE_VER"  # This should match the tag created above


    - name: Create Release
      if: env.skip_rest == 'false'
      id: create_release
      run: |
        gh release create "v${{ env.FILE_VER }}" \
          --draft=false \
          --prerelease=true \
          --title "Violentmonkey Modified ver ${{ env.FILE_VER }}" \
          --notes "[https://github.com/violentmonkey/violentmonkey/releases/tag/v${{ env.FILE_VER }}](https://github.com/violentmonkey/violentmonkey/releases/tag/v${{ env.FILE_VER }})"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Asset
      if: env.skip_rest == 'false'
      run: |
        gh release upload "v${{ env.FILE_VER }}" "./Violentmonkey-modified-${{ env.FILE_VER }}.zip" \
          --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

